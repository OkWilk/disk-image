#!/usr/bin/python3

"""
Author:     Oktawiusz Wilk
Date:       10/04/2016
License:    GPL
"""

import logging

from flask import Flask
from flask_restful import Api

import constants
from services.database import DB
from api.resources.disk import Disk
from api.resources.heartbeat import Heartbeat
from api.resources.job import Job
from api.resources.monitor import Monitor
from api.resources.mount import Mount

logging .basicConfig(level=logging.DEBUG,
                     format='%(asctime)s [%(name)s][%(levelname)s]: %(message)s',
                     filename='/var/log/diskimage/node.log',
                     filemode='w')
log = logging.getLogger('werkzeug').setLevel(logging.WARNING)  # Suppress HTTP request logging
_logger = logging.getLogger(__name__)
_logger.info("Initialising Disk Image Node v " + constants.VERSION + ".")
app = Flask(__name__)
api = Api(app)
DB.remove_zombie_backups()


_logger.info("Adding endpoints.")
api.add_resource(Heartbeat, '/api/heartbeat')
api.add_resource(Monitor, '/api/metric')
api.add_resource(Disk, '/api/disk', '/api/disk/<disk_id>')
api.add_resource(Job, '/api/job', '/api/job/<job_id>')
api.add_resource(Mount, '/api/mount', '/api/mount/<backup_id>')

_logger.info("Initialisation finished.")
@app.after_request
def after_request(response):
    """
    Allow remote hosts to use the API.
    :param response: response object generated by flask_restful
    :return: response object with additional headers.
    """
    response.headers.add('Access-Control-Allow-Origin', '*')
    response.headers.add('Access-Control-Allow-Headers', 'Content-Type,Authorization')
    response.headers.add('Access-Control-Allow-Methods', 'GET,PUT,POST,DELETE')
    return response

if __name__ == '__main__':
    app.run(host='0.0.0.0', threaded=True)
